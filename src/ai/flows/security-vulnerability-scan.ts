'use server';

/**
 * @fileOverview Security Vulnerability Scan AI agent.
 *
 * - securityVulnerabilityScan - A function that handles the security vulnerability scan process.
 * - SecurityVulnerabilityScanInput - The input type for the securityVulnerabilityScan function.
 * - SecurityVulnerabilityScanOutput - The return type for the securityVulnerabilityScan function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SecurityVulnerabilityScanInputSchema = z.object({
  openApiSpec: z
    .string()
    .describe('The OpenAPI specification to analyze for security vulnerabilities.'),
});
export type SecurityVulnerabilityScanInput = z.infer<typeof SecurityVulnerabilityScanInputSchema>;

const SecurityVulnerabilityScanOutputSchema = z.object({
  vulnerabilities: z
    .array(z.string())
    .describe('A list of security vulnerabilities found in the OpenAPI specification.'),
  recommendations: z
    .array(z.string())
    .describe('A list of recommendations to address the identified vulnerabilities.'),
});
export type SecurityVulnerabilityScanOutput = z.infer<typeof SecurityVulnerabilityScanOutputSchema>;

export async function securityVulnerabilityScan(input: SecurityVulnerabilityScanInput): Promise<SecurityVulnerabilityScanOutput> {
  return securityVulnerabilityScanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'securityVulnerabilityScanPrompt',
  input: {schema: SecurityVulnerabilityScanInputSchema},
  output: {schema: SecurityVulnerabilityScanOutputSchema},
  prompt: `You are a security expert specializing in identifying security vulnerabilities in OpenAPI specifications.

You will analyze the provided OpenAPI specification and identify potential security vulnerabilities, such as missing authentication, insecure data handling, and other common issues.

You will then provide recommendations to address the identified vulnerabilities.

OpenAPI Specification:
{{{openApiSpec}}}`, 
});

const securityVulnerabilityScanFlow = ai.defineFlow(
  {
    name: 'securityVulnerabilityScanFlow',
    inputSchema: SecurityVulnerabilityScanInputSchema,
    outputSchema: SecurityVulnerabilityScanOutputSchema,
  },
  async (input: SecurityVulnerabilityScanInput) => {
    const {output} = await prompt(input);
    return output!;
  }
);
