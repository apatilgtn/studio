
"use client";

import { useState } from "react";
import { useOpenApiStore } from "@/stores/openapi-store";
import { securityVulnerabilityScan, type SecurityVulnerabilityScanOutput } from "@/ai/flows/security-vulnerability-scan";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Icons } from "@/components/icons";
import { VulnerabilityScanResults } from "@/components/vulnerability-scan/vulnerability-scan-results";
import { OpenApiUploadForm } from "@/components/openapi-upload-form";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";


export default function VulnerabilityScanPage() {
  const { spec, rawSpec, fileName, error: specError } = useOpenApiStore();
  const [scanResults, setScanResults] = useState<SecurityVulnerabilityScanOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [scanError, setScanError] = useState<string | null>(null);
  const { toast } = useToast();

  const handleScan = async () => {
    if (!rawSpec) {
      toast({
        title: "No Specification Loaded",
        description: "Please load an OpenAPI specification first.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setScanError(null);
    setScanResults(null);

    try {
      const results = await securityVulnerabilityScan({ openApiSpec: rawSpec });
      setScanResults(results);
      toast({
        title: "Scan Complete",
        description: `Vulnerability scan for "${fileName}" finished.`,
      });
    } catch (err: any) {
      console.error("Vulnerability scan error:", err);
      const errorMessage = err.message || "An unexpected error occurred during the scan.";
      setScanError(errorMessage);
      toast({
        title: "Scan Failed",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto space-y-4 md:space-y-6"> {/* Reduced spacing */}
      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="text-xl md:text-2xl flex items-center gap-2"> {/* Reduced size */}
            <Icons.ShieldAlert className="w-5 h-5 md:w-6 md:h-6 text-primary" /> Security Vulnerability Scan
          </CardTitle>
          <CardDescription className="text-xs md:text-sm">
            Analyze your OpenAPI specification for potential security vulnerabilities using AI.
            This tool identifies common issues and provides recommendations.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {!spec && !specError && (
            <>
              <Alert className="mb-4 md:mb-6"> {/* Reduced margin */}
                <Icons.Info className="h-4 w-4" />
                <AlertTitle className="text-sm md:text-base">Load Specification to Start</AlertTitle> {/* Reduced size */}
                <AlertDescription className="text-xs md:text-sm">
                  You need to import an OpenAPI specification before you can run a security scan.
                  Use the form below to load your API definition.
                </AlertDescription>
              </Alert>
              <OpenApiUploadForm />
            </>
          )}
          {specError && (
             <Alert variant="destructive" className="mb-4 md:mb-6"> {/* Reduced margin */}
                <Icons.AlertTriangle className="h-4 w-4" />
                <AlertTitle className="text-sm md:text-base">Error with Specification</AlertTitle> {/* Reduced size */}
                <AlertDescription className="text-xs md:text-sm">
                  There was an error loading the specification: {specError}. Please try importing again.
                  <div className="mt-3 md:mt-4"><OpenApiUploadForm/></div> {/* Reduced margin */}
                </AlertDescription>
            </Alert>
          )}
          {spec && !specError && (
            <div className="mt-3 md:mt-4 text-center"> {/* Reduced margin */}
               <p className="text-xs text-muted-foreground mb-3 md:mb-4"> {/* Reduced text/margin */}
                Loaded specification: <strong className="text-foreground">{fileName}</strong>
              </p>
              <Button onClick={handleScan} disabled={isLoading || !rawSpec} size="lg">
                {isLoading ? (
                  <Icons.Loader className="mr-2 h-4 w-4 md:h-5 md:w-5 animate-spin" />
                ) : (
                  <Icons.Zap className="mr-2 h-4 w-4 md:h-5 md:w-5" />
                )}
                Start AI Vulnerability Scan
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      <VulnerabilityScanResults results={scanResults} isLoading={isLoading} error={scanError} />
    </div>
  );
}
